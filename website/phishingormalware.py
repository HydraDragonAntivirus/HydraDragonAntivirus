import os

def create_malware_domains():
    phishing_file = "PhishingDomains.txt"
    malware_file = "MalwareDomains.txt"
    malware_output_file = "MalwareDomains_cleaned.txt"
    phishing_cleaned_file = "PhishingDomains_cleaned.txt"

    # Check if phishing file exists
    if os.path.exists(phishing_file):
        # Read phishing domains into a set (with utf-8 encoding to avoid encoding errors)
        with open(phishing_file, "r", encoding="utf-8") as file:
            phishing_domains = set(line.strip() for line in file if line.strip())

        # Read malware domains into a set (with utf-8 encoding to avoid encoding errors)
        with open(malware_file, "r", encoding="utf-8") as file:
            malware_domains = set(line.strip() for line in file if line.strip())

        # Subtract phishing domains from malware domains to get clean malware domains
        clean_malware_domains = malware_domains - phishing_domains

        # Write the resulting clean malware domains to MalwareDomains_cleaned.txt
        with open(malware_output_file, "w", encoding="utf-8") as file:
            file.write("\n".join(clean_malware_domains))

        print(f"MalwareDomains_cleaned.txt has been created with {len(clean_malware_domains)} unique malware domains.")

        # Remove duplicates within phishing domains and write to phishingdomains_cleaned.txt
        phishing_domains_cleaned = sorted(phishing_domains)  # Sorted to maintain order
        with open(phishing_cleaned_file, "w", encoding="utf-8") as file:
            file.write("\n".join(phishing_domains_cleaned))

        print(f"PhishingDomains_cleaned.txt has been created with {len(phishing_domains_cleaned)} unique phishing domains.")
        
    else:
        print(f"The file {phishing_file} does not exist. Operation aborted.")

if __name__ == "__main__":
    create_malware_domains()
