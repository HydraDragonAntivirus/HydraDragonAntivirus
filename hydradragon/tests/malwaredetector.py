import ctypes
import time

# Constants
WM_GETTEXT = 0x000D
WM_GETTEXTLENGTH = 0x000E

def get_window_text(hwnd):
    """Retrieve the text of a window."""
    length = ctypes.windll.user32.GetWindowTextLengthW(hwnd) + 1
    buffer = ctypes.create_unicode_buffer(length)
    ctypes.windll.user32.GetWindowTextW(hwnd, buffer, length)
    return buffer.value

def get_control_text(hwnd):
    """Retrieve the text from a control."""
    length = ctypes.windll.user32.SendMessageW(hwnd, WM_GETTEXTLENGTH) + 1
    buffer = ctypes.create_unicode_buffer(length)
    ctypes.windll.user32.SendMessageW(hwnd, WM_GETTEXT, length, buffer)
    return buffer.value

def find_child_windows(parent):
    """Find all child windows of a given parent window."""
    child_windows = []
    def enum_child_windows_callback(hwnd, lParam):
        child_windows.append(hwnd)
        return True

    EnumChildWindowsProc = ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.c_int, ctypes.c_void_p)
    ctypes.windll.user32.EnumChildWindows(parent, EnumChildWindowsProc(enum_child_windows_callback), None)
    return child_windows

def find_windows_with_text(target_text):
    """Find all windows containing the specified text and their child windows."""
    def enum_windows_callback(hwnd, lParam):
        if ctypes.windll.user32.IsWindowVisible(hwnd):
            window_text = get_window_text(hwnd)
            if target_text in window_text:
                window_handles.append((hwnd, window_text))
            else:
                for child in find_child_windows(hwnd):
                    control_text = get_control_text(child)
                    if target_text in control_text:
                        window_handles.append((child, control_text))
                        break
        return True

    window_handles = []
    EnumWindowsProc = ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.c_int, ctypes.c_void_p)
    ctypes.windll.user32.EnumWindows(EnumWindowsProc(enum_windows_callback), None)
    return window_handles

def main():
    target_message = "This program cannot be run under virtual environment or debugging software"

    while True:
        windows = find_windows_with_text(target_message)
        for hwnd, text in windows:
            print(f'Window with text "{text}" found. HWND: {hwnd}')
            ctypes.windll.user32.MessageBoxW(0, f'Detected message: {text}', 'Alert', 0)
            # Optionally, close the window
            # ctypes.windll.user32.PostMessageW(hwnd, WM_CLOSE, 0, 0)
        
        time.sleep(5)  # Adjust the wait time as needed

if __name__ == "__main__":
    main()