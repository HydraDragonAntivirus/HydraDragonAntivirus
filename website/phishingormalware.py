import os

def process_domain_files():
    # Define file names
    files_priority = [
        "SpamDomains.txt",
        "MiningDomains.txt",
        "AbuseDomains.txt",
        "PhishingDomains.txt",
        "MalwareDomains.txt"
    ]
    whitelist_file = "WhiteListDomains.txt"
    
    # Dictionary to store domains for each category
    domain_sets = {}
    
    # Read whitelist domains first
    try:
        with open(whitelist_file, 'r', encoding='utf-8') as f:
            whitelist_domains = {line.strip() for line in f if line.strip()}
    except FileNotFoundError:
        print(f"Warning: {whitelist_file} not found. Proceeding without whitelist.")
        whitelist_domains = set()

    # Read all domain files
    for file_name in files_priority:
        try:
            with open(file_name, 'r', encoding='utf-8') as f:
                domains = {line.strip() for line in f if line.strip()}
                # Remove whitelisted domains
                domains = domains - whitelist_domains
                domain_sets[file_name] = domains
        except FileNotFoundError:
            print(f"Warning: {file_name} not found. Skipping.")
            domain_sets[file_name] = set()

    # Process domains according to priority
    for i, high_priority_file in enumerate(files_priority):
        for low_priority_file in files_priority[i+1:]:
            # Move duplicate domains to higher priority file
            duplicates = domain_sets[high_priority_file] & domain_sets[low_priority_file]
            # Remove duplicates from lower priority file
            domain_sets[low_priority_file] -= duplicates

    # Write processed domains back to files
    for file_name, domains in domain_sets.items():
        output_file = f"cleaned_{file_name}"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(sorted(domains)))
        print(f"Created {output_file} with {len(domains)} unique domains")

    # Write whitelist domains to cleaned file
    with open(f"cleaned_{whitelist_file}", 'w', encoding='utf-8') as f:
        f.write('\n'.join(sorted(whitelist_domains)))
    print(f"Created cleaned_{whitelist_file} with {len(whitelist_domains)} domains")

if __name__ == "__main__":
    process_domain_files()